<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0" charset="UTF-8"/>
<style>
canvas {
    width: 1024px;
    height:633px;
    border:1px solid #d3d3d3;
    background-color: #f1f1f1;
    display: block;
}
</style>
</head>

<body onload="startGame()">

<script>
// for testing
const hobbit = "In a hole in the ground there lived a hobbit. Not a nasty, dirty, wet hole, filled with the ends of worms and an oozy smell, nor yet a dry, bare, sandy hole with nothing in it to sit down on or to eat: it was a hobbit­hole, and that means comfort.  It had a perfectly round door like a porthole, painted green, with a shiny yellow brass knob in the exact middle. The door opened on to a tube­shaped hall like a tunnel: a very comfortable tunnel without smoke, with panelled walls, and floors tiled and carpeted, provided with polished chairs, and lots and lots of pegs for hats and coats ­ the hobbit was fond of visitors. The tunnel wound on and on, going fairly but not quite straight into the side of the hill ­ The Hill, as all the people for many miles round called it ­ and many little round doors opened out of it, first on one side and then on another. No going upstairs for the hobbit: bedrooms, bathrooms, cellars, pantries (lots of these), wardrobes (he had whole rooms devoted to clothes), kitchens, dining­rooms, all were on the same floor, and indeed on the same passage. The best rooms were all on the left­hand side (going in), for these were the only ones to have windows, deep­set round windows looking over his garden and meadows beyond, sloping down to the river."

var level_up = 0
var level = 1
var maxlevels = 2;
var gameover = 0;
// max hits for castles
var maxhits = 6;
// max lives
var maxlives = 3;

// pause_count
pause_count=100

// the pieces
var myGamePiece;
var yourGamePiece;

// interval between frames
var interval = 20
// image scale
var scale = 1

var myScore=0;
var buffer = 20;
var maxArrows = 3;
var maxEnemyArrows = 50;
var test=0;
var speedscale = 600
var pause_game = 0
var wait = 0

var background = {
  file : "background.gif",
  x    : 1024,
  y    : 633,
  startx : 0,
  starty : 0,
  type : "image",
  direction : 0
};

var background2 = {
  file : "background2.gif",
  x    : 1024,
  y    : 633,
  startx : 0,
  starty : 0,
  type : "image",
  direction : 0
};


var myAvatar = {
  file : "henry.gif",
  x    : 70,
  y    : 70,
  startx : 10,
  starty : 120,
  shot : {
    file : "arrow.gif",
    x : 50,
    y : 10,
    direction : 1,
  },
  castle : {
    // root name for castle
    file : "rhorse",
    x    : 77,
    y    : 77,
    direction : 0
  },
  type : "image",
  direction : 1
};

// level 2
var myAvatar2 = {
  file : "henry.gif",
  x    : 70,
  y    : 70,
  startx : 10,
  starty : 120,
  shot : {
    file : "arrow.gif",
    x : 50,
    y : 10,
    direction : 1,
  },
  castle : {
    // root name for castle
    file : "englishship",
    x    : 77,
    y    : 77,
    direction : 0
  },
  type : "image",
  direction : 1
};

var yourAvatar = {
  file : "horse_1.gif",
  x    : 70,
  y    : 70,
  startx : background.x - myAvatar.x - 10,
  starty : 0,
  shot : { 
    file : "back_arrow.gif",
    x : 70,
    y : 10,
    direction : -1
  },
  castle : {
    file : "horse",
    x    : 100,
    y    : 100,
    direction : -1
  },
  type : "image",
  direction : 1
};

var yourAvatar2 = {
  file : "philip2.gif",
  x    : 70,
  y    : 70,
  startx : background2.x - myAvatar2.x - 10,
  starty : 0,
  shot : {
    file : "cannon.gif",
    x : 10,
    y : 10,
    direction : -1
  },
  castle : {
    file : "englishship",
    x    : 100,
    y    : 100,
    direction : -1
  },
  type : "image",
  direction : 1
};

var myStorySetup = = {
  font:  "5px Consolas",
  color : "red",
  x     :  0,
  y     :  ,
  text  : hobbit
}


var myStoryFrame=myStorySetup
var myAvatarFrame=myAvatar
var yourAvatarFrame=yourAvatar
var backgroundFrame=background

var myScoreSetup = {
  font:  "25px Consolas", 
  color : "green", 
  x     :  230, 
  y     :  80,
  text  : ""
}

// text for game over etc
var myGameSetup = {
  font:  "100px Consolas",  
  color : "red", 
  x     :  background.x/4,
  y     :  background.y/2,
  text  : ""
}

// text for game over etc
var myGameSetup2 = {
  font:  "50px Consolas",
  color : "red",
  x     :  background.x/4,
  y     :  background.y/2+background.y/20,
  text  : ""
}

// life indicator
var myLifeSetup = {
  font:  "25px Consolas",
  color : "black",
  x     :  230,
  y     :  120,
  text  : "❤️".repeat(maxlives) + " " +  (level).toString()
}

// story text
var myTextSetup = {
  font:  "30px Consolas",
  color : "black",
  x     :  10,
  y     :  10,
  text  : "This is the tudors"
}

function translate_origin (obj,startx,starty) {
  //var new_obj = {...obj}
  var new_obj = {
    file : obj.file,
    x : obj.x,
    y : obj.y,
    direction : obj.direction
  }
  new_obj.startx = Math.floor(startx);
  new_obj.starty = Math.floor(starty);
  return new_obj
}


// from https://stackoverflow.com/questions/5026961/html5-canvas-ctx-filltext-wont-do-line-breaks
var wrapText = function (context, text, x, y, maxWidth, lineHeight) {
    var paragraphs = text.split("\n");
    var textLines = [];

    // Loop through paragraphs
    for (var p = 0; p < paragraphs.length; p++) {
        var line = "";
        var words = paragraphs[p].split(" ");
        // Loop through words
        for (var w = 0; w < words.length; w++) {
            var testLine = line + words[w] + " ";
            var metrics = context.measureText(testLine);
            var testWidth = metrics.width;
            // Make a line break if line is too long
            if (testWidth > maxWidth) {
                textLines.push(line.trim());
                line = words[w] + " ";
            }
            else {
                line = testLine;
            }
        }
        textLines.push(line.trim());
    }

    // Move text up if centered vertically
    if (context.textBaseline === 'middle')
        y = y - ((textLines.length-1) * lineHeight) / 2;

    // Render text on canvas
    for (var tl = 0; tl < textLines.length; tl++) {
        context.fillText(textLines[tl], x, y);
        y += lineHeight;
    }
};

printTextObj = function (obj) {
  // round up - use ceil
  maxWidth = Math.ceil(background.x * 0.9)
  // parseInt see
  // https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_parseint1
  // should work with eg "10px Consolas" to give 10
  lineHeight= Math.ceil(parseInt(obj.font)*1.1)
  ctx = myGameArea.context
  wrapText(ctx, obj.text, obj.x, obj.y, maxWidth, lineHeight)
}

function startGame(myAv,yourAv,bg, story) {
 
    if ( ! myAv ) myAv = myAvatar
    if ( ! yourAv ) yourAv = yourAvatar
    if ( ! bg ) bg = background
    if ( ! story ) story = myStorySetup

    // game pieces
    myField = new component(bg);
    // my character
    myGamePiece = new component(myAv);
    // your character
    yourGamePiece = new component(yourAv);
    // game over msgs
    myGame = new text_component(myGameSetup);
    myGame2 = new text_component(myGameSetup2);
    // score
    myScore = new text_component(myScoreSetup);
    // Lives
    myLife = new text_component(myLifeSetup);
    // story text
    myStory = new text_component(story)

    myGameArea.start();
}

var myGameArea = {
    score : 0,
    canvas : document.createElement("canvas"),
    keyboard : document.addEventListener("keydown", function(event) {
        if (event.key == "d") {
          myGamePiece.right(1);
        } else if (event.key == "w") {
          myGamePiece.up(1);
        } else if (event.key == "s") {
          myGamePiece.down(1);
        } else if (event.key == "a") {
          myGamePiece.left(1);
        } else if (event.key == "q") {
          myGamePiece.reset();
        } else if (event.key == "f") {
          myGamePiece.fire()
        } else if (event.key == "z") {
          myGamePiece.stop()
        }
    }),
    start : function() {
        this.canvas.width = background.x;
        this.canvas.height = background.y;
        this.context = this.canvas.getContext("2d");
        document.body.insertBefore(this.canvas, document.body.childNodes[0]);
        this.frameNo = 0;
        this.interval = setInterval(updateGameArea, interval);
        nCastles = Math.floor(Math.random()*6)+2
        addLineOfCastles(myGamePiece,nCastles,Math.floor(backgroundFrame.x*0.1),myAvatarFrame.castle.x,myAvatarFrame.castle.y,myAvatarFrame.castle.file)

        nCastles = 10
        addLineOfCastles(yourGamePiece,nCastles,Math.floor(backgroundFrame.x*0.9-yourAvatarFrame.castle.x/4),yourAvatarFrame.castle.x,yourAvatarFrame.castle.y,yourAvatarFrame.castle.file)

        },
    clear : function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        ctx = myGameArea.context;
        ctx.drawImage(myField.image,
                  myField.x,
                  myField.y,
                  myField.width, myField.height);
    }
}

function text_component(obj){
    this.obj = obj;
    //this.ctx = myGameArea.context;
    this.x = this.obj.x;
    this.y = this.obj.y;
    this.font = this.obj.font;
    this.color=this.obj.color;
    this.reset = function() {
        this.x = this.obj.x;
        this.y = this.obj.y;
        this.font = this.obj.font;
        this.color=this.obj.color;
    }
    this.update = function() {
        ctx = myGameArea.context
        ctx.font = this.font;
        ctx.fillStyle = this.color;
        //if ( this.text ) ctx.fillText(this.text, this.x, this.y);
        if ( this.text ) printTextObj(this)
    }
}

// component is an object
// like an avatar
// but can contain Bullets and Castles
// 
// The rules are:
// - Bullets can destroy Castles

function component(obj) {
    this.image = new Image();
    this.startfile = obj.file;
    this.image.src = obj.file;
    this.lives = maxlives; 
    this.startx = obj.startx;
    this.starty = obj.starty;
    this.startwidth = obj.x;
    this.startheight = obj.y;
    this.myCastles = [];
    this.myBullets = [];

    this.score = 0;
    this.direction = obj.direction;
    this.x = this.startx;
    this.y = this.starty;
    this.width = this.startwidth;
    this.height = this.startheight;
    this.speedX = 0;
    this.speedY = 0;
    this.image.src = this.startfile;
    this.active=maxhits;
    this.iwon = 0;
    if (obj.shot) {
      this.bullet = obj.shot;
      this.castle = obj.castle;
    }

    this.reset = function() {
        this.myBullets = [];
        this.score = 0;
        this.direction = obj.direction;
        this.x = this.startx;
        this.y = this.starty;
        this.width = this.startwidth;
        this.height = this.startheight;
        this.speedX = 0;
        this.speedY = 0;  
        this.image.src = this.startfile;
        this.active=maxhits;
        this.iwon = 0;
    }
    this.update = function() {
        ctx = myGameArea.context;
        if ( this.active) {
          ctx.drawImage(this.image, 
            this.x, 
            this.y,
            this.width, this.height);
        }
    }
    this.newPos = function(isPiece) {
        this.x += this.speedX;
        this.y += this.speedY;
        this.hitBottom(isPiece);
        this.hitTop(isPiece);
        this.hitLeft(isPiece);
        this.hitRight(isPiece);
    }
    this.clearArrows = function() {
        var test;
        var newList = [];
        for (i = 0; i < this.myBullets.length; i += 1) {
            test = this.myBullets[i]
            if (test.x < 0 || test.x > background.x ) test.active = 0
            if ( test.active > 0 ) {
                newList.push(test);
            }
        }
        this.myBullets = newList
    }
    this.bounceBottom = function(){
        var rockbottom = myGameArea.canvas.height - this.height;
        if (this.y > rockbottom) {
             this.direction = 1 - this.direction
        }
    }
    this.bounceTop = function(){
        if (this.y < 0) {
             this.direction = 1 - this.direction
        }
    }
    this.hitBottom = function(isPiece) {
        var rockbottom = myGameArea.canvas.height - this.height;
        if (this.y > rockbottom) {
            if ( isPiece ) {
                this.y = rockbottom;
            } else {
                this.active = 0
            }
        }
    }
    this.hitTop = function(isPiece) {
        if (this.y < 0) {
            if ( isPiece ) {
                this.y = 0;
            } else {
                this.active = 0
            }
        }
    }
    // what happens when you win
    this.win = function() {
        // clear the deck
        level_up=0
        //myGameArea.clear()
        myScore.text="SCORE: " + Math.floor(myGameArea.score);
        myScore.update();
        if ( level == maxlevels ) {
            myGame.text="YOU WIN" + hobbit
            myGame2.text=""
            this.iwon=1;
            gameover=1
        } else {
            myGame.text="LEVEL UP"
            myGame2.text=""
            pause_game=1
            wait=pause_count
            level += 1
            level_up=1
            // next level
        }
        myGame.update();
        //updateGameArea()
        for (i = 0; i < this.myBullets.length; i += 1) {
            this.myBullets[i].active = 0
        }
        if (level_up==1){
            updateGameArea()
        }
    }
    this.cheat = function(isPiece) {
        var rockbottom = myGameArea.canvas.width - this.width - buffer;
        this.x = rockbottom;
        this.win()
    }
    this.hitLeft = function(isPiece) {
        var rockbottom = myGameArea.canvas.width - this.width - buffer;
        if (this.x > rockbottom) {
            if ( isPiece ) {
                this.x = rockbottom;
                this.win()
            } else {
                this.active = 0
            }
        }
    }
    this.hitRight = function(isPiece) {
        if (this.x < 0) {
            this.x = 0;
        }
    }
    this.crashWith = function(otherobj,buffer) {
        if ( otherobj.active == 0 || this.active == 0) {
            return false
        }
        var half = Math.floor(buffer/2);
        var myleft = this.x+half;
        var myright = this.x + (this.width) - half;
        var mytop = this.y + half;
        var mybottom = this.y + (this.height) - half;
        var otherleft = otherobj.x;
        var otherright = otherobj.x + (otherobj.width);
        var othertop = otherobj.y;
        var otherbottom = otherobj.y + (otherobj.height);
        var crash = true;
        if ((mybottom < othertop) || (mytop > otherbottom) || (myright < otherleft) || (myleft > otherright)) {
            crash = false;
        }
        return crash;
    }
    // fire and add to myBullets
    this.fire = function() {
        this.clearArrows()
        if ( this.myBullets.length < maxArrows ) {
            this.myBullets.push(new component(translate_origin(myAvatarFrame.shot,this.x,this.y+Math.random()*70)));
            this.myBullets[this.myBullets.length-1].active=maxhits;
        }
    }
    this.down = function(n) {
        this.speedY = maxy(n);
    }
    this.up = function (n) {
        this.speedY = -maxy(-n);
    }
    this.left = function(n) {
        this.speedX = -maxx(-n);
    }
    this.right = function(n) {
        this.speedX = maxx(n);
    }
    this.stopx = function() {
        this.speedX = 0;
    }
    this.stop = function() {
        this.stopx()
        this.stopy()
    }
    this.stopy = function() {
         this.speedY = 0;
    }
    this.removeBullet = function(bullet) {
        bullet.update();
        bullet.active = 0;
    }
    this.removeCastle = function(castle) {
        // remove a castle life
        castle.active -= 1;
        fileroot = castle.startfile.split("_")[0]
        castle.image.src = fileroot + "_" + (maxhits - castle.active).toString() + ".gif"
    }
    this.remove = function(bullet,castle) {
        // remove a life
        this.removeBullet(bullet)
        this.removeCastle(castle)
    }
    this.bangTest = function(that) {
        // check if bullets collide with castles
        for (j = 0; j < this.myCastles.length; j += 1) {
            for (i = 0; i < this.myBullets.length; i += 1) {
                if (this.myCastles[j].crashWith(this.myBullets[i],0)) {
                    this.remove(this.myBullets[i],this.myCastles[j])     
                }
            }
        }
        // check if bullets collide with other objects bullets
        for (j = 0; j < that.myBullets.length; j += 1) {
            for (i = 0; i < this.myBullets.length; i += 1) {
                if (that.myBullets[j].crashWith(this.myBullets[i],0)) {
                    this.removeBullet(this.myBullets[i])
                    that.removeBullet(that.myBullets[j])
                    myGameArea.score += 10
                    myGame.text="GREAT SHOT"
                    myGame2.text=""
                    myGame.update();
                }
            }
        }
        // check if bullets collide with other objects castles
        for (j = 0; j < that.myCastles.length; j += 1) {
            for (i = 0; i < this.myBullets.length; i += 1) {
                if (that.myCastles[j].crashWith(this.myBullets[i],0)) {
                    this.remove(this.myBullets[i],that.myCastles[j])
                    myGameArea.score += 1
                    myGame.text="DAMAGE"
                    myGame2.text=""
                    myGame.update();
                }
            }
        }
        // check if your bullets collide with my castles
        for (j = 0; j < this.myCastles.length; j += 1) {
            for (i = 0; i < that.myBullets.length; i += 1) {
                if (this.myCastles[j].crashWith(that.myBullets[i],0)) {
                    that.remove(that.myBullets[i],this.myCastles[j])
                }
            }
        }
        // check if your castles collide with your castles
        for (j = 0; j < that.myCastles.length; j += 1) {
            for (i = 0; i < this.myCastles.length; i += 1) {
                if (that.myCastles[j].crashWith(this.myCastles[i],0)) {
                    that.removeCastle(this.myCastles[i])
                    that.removeCastle(that.myCastles[j])
                }
            }
        }
    }
}

function amIHit(myPiece,yourPiece) {
    // have you shot me with your arrows?
    
    // check if your arrows collide with myPiece
    for (i = 0; i < yourPiece.myBullets.length; i += 1) {
        if (myPiece.crashWith(yourPiece.myBullets[i],0)) {
            myPiece.lives = myPiece.lives - 1;
            myGame.text="YOU'RE HIT"
            myGame2.text=""
            myLife.text="❤️".repeat(myPiece.lives) + " " +  (level).toString()
            myLife.update();
            yourPiece.myBullets[i].active = 0
            if ( myPiece.lives < 1 ) {
                // what happens if you lose
                for (i = 0; i < myPiece.myBullets.length; i += 1) {
                    myPiece.myBullets[i].active = 0
                }
                // in case you want to do different
                if ( level == maxlevels ) {
                    myGame.text="DOWN A LEVEL"
                    level -= 1
                    if ( level < 1 ) level = 1
                    myGame2.text="PAUSED"
                    pause_game=1
                    wait=pause_count
                    level_up=1
                    //reset()
                } else {
                    myGame.text="GAME OVER"
                    myGame2.text=""
                    gameover = 1;
                    myPiece.iwon=0;
                    yourPiece.iwon=1;
                }
                myGame.update();
                return true
            }
        }
    }

    // collision tests for castles and arrows
    myPiece.bangTest(yourPiece)

    // check if myPiece collides with my castles
    // bounce back
    for (j = 0; j < myPiece.myCastles.length; j += 1) {
      if ( myPiece.myCastles[j].active > 0) {
        if (myPiece.crashWith(myPiece.myCastles[j],buffer)) {
          myPiece.stop()
          myPiece.left(1)
        }
      }
    }

    // check if myPiece collides with your castles
    // lose a life and bounce back
    for (j = 0; j < yourPiece.myCastles.length; j += 1) {
      if ( yourPiece.myCastles[j].active > 0) {
        if (myPiece.crashWith(yourPiece.myCastles[j],buffer)) {
          myPiece.stop()
          myPiece.left(1)
          myGame.text="YOU'RE HIT"
          myGame2.text=""
          myPiece.lives = myPiece.lives - 1;
          myLife.text="❤️".repeat(myPiece.lives) + " " +  (level).toString()
          myLife.update();
          myPiece.removeCastle(yourPiece.myCastles[j])
          if ( myPiece.lives < 1 ) {
                // what happens if you lose
                if ( level == maxlevels ) {
                    myGame.text="DOWN A LEVEL"
                    level -= 1
                    if ( level < 1 ) level = 1
                    myGame2.text="PAUSED"
                    pause_game=1
                    wait=pause_count
                    reset()
                } else {
                    myGame.text="GAME OVER"
                    myGame2.text=""
                    gameover = 1;
                    myPiece.iwon=0;
                    yourPiece.iwon=1;
                }
                for (i = 0; i < myPiece.myBullets.length; i += 1) {
                    myPiece.myBullets[i].active = 0
                }
                myGame.update();
                return true
          }
        }
      }
    }
    return false;
}

function pause(txt,txt2) {
  if ( txt ) myGame.text=txt
  if ( txt2 ) myGame2.txt=txt2
  pause_game = 1 - pause_game
}

function updateGameArea() {
    var x, height, gap, minHeight, maxHeight, minGap, maxGap;

    if ( gameover == 1 ) return;

    // we count down wait to 1
    // because wait = 0 is do nothing
    if (wait > 1 ) {
      pause_game = 1
    }
    // take off the wait
    if (wait == 1 ) {
      pause_game = 0
    }

    wait -= 1
    if ( wait < 0 ) wait = 0;

    if ( pause_game == 1) {
        //myGameArea.clear()
        //myGame.text=""
        //myGame2.text=""
        myGame.update();
        //myGame.text="PAUSED"
        //myGame2.text=""
        //myGame.update();
        return;
    }
    // action on level up
    if (level_up == 1 ) {
        level_up = 0
        reset()
    }

    // check if your arrows collide with myGamePiece
    amIHit(myGamePiece,yourGamePiece)

    myGameArea.clear();

    if (myGamePiece.iwon == 0 ) {
        myGameArea.frameNo += 1;
    }

    // fire my arrows from alien
    if (myGameArea.frameNo == 1 || everyinterval(Math.floor(Math.random()*600))) {
        myGame.text=""
        myGame2.text=""
        yourGamePiece.clearArrows()
        if ( yourGamePiece.myBullets.length <= maxEnemyArrows ) {
            // fire from your leader
            yourGamePiece.myBullets.push(new component(translate_origin(yourAvatarFrame.shot,yourGamePiece.x,yourGamePiece.y+Math.random()*10)));
            yourGamePiece.myBullets[yourGamePiece.myBullets.length-1].active=1;
        }

    }

    for (i = 0; i < myGamePiece.myCastles.length; i += 1) {
        myGamePiece.myCastles[i].update();
    }

    for (i = 0; i < yourGamePiece.myCastles.length; i += 1) {
        if (everyinterval(Math.floor(Math.random()*5000))) {
            myGame.text=""
            myGame2.text=""
            yourGamePiece.clearArrows()
            x = yourGamePiece.myCastles[i].x
            y = yourGamePiece.myCastles[i].y
            if ( yourGamePiece.myBullets.length <= maxEnemyArrows ) {
                // fire from the castles
                yourGamePiece.myBullets.push(new component(translate_origin(yourAvatarFrame.shot,x,y+Math.random()*10)));
                yourGamePiece.myBullets[yourGamePiece.myBullets.length-1].active=1;
            }
        }
    }


    for (i = 0; i < yourGamePiece.myCastles.length; i += 1) {
        yourGamePiece.myCastles[i].update();
    }

    // move on your bullets
    for (i = 0; i < yourGamePiece.myBullets.length; i += 1) {
        yourGamePiece.myBullets[i].x += -1;
        yourGamePiece.myBullets[i].update();
    }

    // move on my bullets
    for (i = 0; i < myGamePiece.myBullets.length; i += 1) {
        myGamePiece.myBullets[i].x += 2;
        myGamePiece.myBullets[i].update();
    }


    // check if bullets collide with other object to get points
    for (i = 0; i < myGamePiece.myBullets.length; i += 1) {
        if (myGamePiece.myBullets[i].crashWith(yourGamePiece,0)) {
            myGamePiece.removeBullet(myGamePiece.myBullets[i])
            myGameArea.score += 100
            myGame.text="BONUS 100"
            myGame2.text=""
            myGame.update();
        }
    }

    // advance the score and update
    myScore.text="SCORE: " + Math.floor(myGameArea.score);
    myScore.update();

    myLife.text="❤️".repeat(myGamePiece.lives) + " " +  (level).toString()
    myLife.update();

    // move on the piece and update
    myGamePiece.newPos(true);
    myGamePiece.update();

    yourGamePiece.speedY = Math.floor(Math.random()*5)+1

    yourGamePiece.y +=  yourGamePiece.speedY
    yourGamePiece.update();
    if ( yourGamePiece.y > background.y ) {
        yourGamePiece.y = 0
        // move on your castles
        for (i = 0; i < yourGamePiece.myCastles.length; i += 1) {
            yourGamePiece.myCastles[i].x -= Math.floor(yourAvatar.castle.x/4);
            yourGamePiece.myCastles[i].update();
        }

    }
    // test for lose
    for (i = 0; i < yourGamePiece.myCastles.length; i += 1) {
        if ( yourGamePiece.myCastles[i].x < -10 ) {
            if ( level == maxlevels ) {
                myGame.text="DOWN A LEVEL"
                level -= 1
                if ( level < 1 ) level = 1
                myGame2.text="PAUSED"
                //updateGameArea()
                reset()
            } else {
                myGame.text="GAME OVER"
                gameover = 1;
                myPiece.iwon=0;
                yourPiece.iwon=1;
            }
            for (i = 0; i < myGamePiece.myBullets.length; i += 1) {
                myGamePiece.myBullets[i].active = 0
            }
            myGame.update();
            return true
        }
    }
    myGame.update();

}

function addLineOfCastles(myPiece,n,x,sizex,sizey,gif) {
    gif = gif + "_1.gif"
    for  (i = 0; i < n; i += 1) {
        y = Math.floor(i*myGameArea.canvas.height/n + sizey/4)
        // new castle obj
        castle = {
          file : gif,
          x    : Math.floor(sizex*3/n),
          y    : Math.floor(sizey*3/n),
          startx : x,
          starty : y
        }
        myPiece.myCastles.push(new component(castle));
    }
}

function everyinterval(n) {
    if ((myGameArea.frameNo / n) % 1 == 0) {return true;}
    return false;
}

function maxx(n) {
    var nn = Math.abs(n)
    return Math.min(Math.abs(n),background.x/speedscale)
}

function maxy(n) {
    var nn = Math.abs(n)
    return Math.min(Math.abs(n),background.y/speedscale)
}


function reset_level1(){
    myAvatarFrame=myAvatar2
    yourAvatarFrame=yourAvatar2
    backgroundFrame=background2

    myGamePiece.reset()
    //myGameArea.frameNo = 1;
    gameover=0;
    //myGameArea.score = 0;

    // game pieces
    delete myField;
    // my character
    delete myGamePiece;
    // your character
    delete yourGamePiece;
    // game over msgs
    delete myGame;
    // score
    delete myScore;
    // Lives
    delete myLife;

    //myGameArea.start();

    clearInterval(myGameArea.interval)
    delete myGameArea
    startGame(myAvatarFrame,yourAvatarFrame,backgroundFrame,storyFrame)
}

function reset_level2(){

    myAvatarFrame=myAvatar2
    yourAvatarFrame=yourAvatar2
    backgroundFrame=background2

    myGamePiece.reset()
    //myGameArea.frameNo = 1;
    gameover=0;
    //myGameArea.score = 0;

    // game pieces
    delete myField;
    // my character
    delete myGamePiece;
    // your character
    delete yourGamePiece;
    // game over msgs
    delete myGame;
    // score
    delete myScore;
    // Lives
    delete myLife;

    //myGameArea.start();

    clearInterval(myGameArea.interval)
    delete myGameArea
    startGame(myAvatarFrame,yourAvatarFrame,backgroundFrame,storyFrame)
}

function reset_poor(){
    // try again, but lose your score
    myGameArea.score = myGameArea.score/2
    if ( level == 1 ) reset_level1();
    if ( level == 2 ) reset_level2();
}

function reset(){
    if ( level == 1 ) reset_level1();
    if ( level == 2 ) reset_level2();
}

</script>
<br>
<center>
<button type="button" onmousedown="myGamePiece.up(2)" onmouseover="myGamePiece.up(1)" onmouseup="myGamePiece.stopy()" ontouchstart="myGamePiece.up(1)">UP</button><br>
<button type="button" onmousedown="myGamePiece.left(2)" onmouseover="myGamePiece.left(1)" onmouseup="myGamePiece.stopx()" ontouchstart="myGamePiece.left(1)">LEFT</button>
<button type="button" onmousedown="myGamePiece.right(2)" onmouseover="myGamePiece.right(1)" onmouseup="myGamePiece.stopx()" ontouchstart="myGamePiece.right(1)">RIGHT</button>
<br>
<button type="button" onmousedown="myGamePiece.down(2)" onmouseover="myGamePiece.down(1)" onmouseup="myGamePiece.stopy()" ontouchstart="myGamePiece.down(1)">DOWN</button>
<br>
<button type="button" onmouseover="myGamePiece.fire()" onmousedown="myGamePiece.fire()" onmouseup="myGamePiece.fire()" ontouchstart="myGamePiece.fire()">FIRE</button>
<br>
<br>
<button type="button onmouseover="myGamePiece.stop()">STOP</button>
<button type="button onmousedown="reset_poor()">Try Again</button>
<button type="button onmousedown="help()" onmouseover="help()">Help</button>
<p>Meet the Tudors: Make it to the right of the screen to win</p>
<br>
<button onmousedown="pause('PAUSED')" onmouseover="pause('PAUSED')">pause</button>

<button onmousedown="myGamePiece.cheat()">cheat</button>
<br>
<audio id="myAudio" controls>
  <source src="greensleeves-flute-and-guitar.mp3" type="audio/mpeg">
  Your browser does not support the audio element.
</audio>



</body>
</html>
